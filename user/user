import zmq
import threading
import uuid
import time
from kivy.app import App
from kivy.clock import Clock
from kivy.core.window import Window
from kivy.uix.boxlayout import BoxLayout
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.popup import Popup
from kivy.uix.screenmanager import ScreenManager, Screen
from kivy.uix.scrollview import ScrollView
from kivy.uix.textinput import TextInput

class messageApp(App):
    def setup(self):
        self.clientId = str(uuid.uuid4())
        self.context = zmq.Context()

        self.screenManager = ScreenManager()

        # initialize login & chat screen
        self.loginScreen = loginScreen(self)
        self.chatScreen = chatScreen(self)

        # add screens to manager
        self.screenManager.add_widget(self.loginScreen)
        self.screenManager.add_widget(self.chatScreen)

        return self.screenManager

class loginScreen(Screen):
    def __init__(self, app, **kwargs):
        super(loginScreen, self).__init__(name='login', **kwargs)
        self.app = app
        self.attemptedLogins = 0
        self.maxAttempts = 3
        self.lockedUp = False # blocks user from attempting to login 

        # set up ZMQ Req socket 
        self.reqSocket = self.app.context.socket(zmq.REQ)
        self.reqSocket.connect("tcp://127.0.0.1:5555")

        # build ui
        layout = BoxLayout(orienteation='vertical', padding=20, spacing=10)

        self.usernameLabel = Label(text='Username:')
        self.usernameInput = TextInput(multiline=False)

        self.passwordLabel = Label(text='Password:')
        self.passwordInput = TextInput(multiline=False)


        self.loginButton = Button(text='Log in')
        self.loginButton.bind(on_press=self.checkCredentials)

        layout.add_widget(self.usernameLabel)
        layout.add_widget(self.usernameInput)
        layout.add_widget(self.passwordLabel)
        layout.add_widget(self.passwordInput)

        self.add_widget(layout)

    def checkCredentials(self, instance):
        if not self.lockedUp:
            enteredUsername = self.usernameInput.strip()
            enteredPassword = self.passwordInput.strip()

            loginMessage = {
                "action": "login",
                "clientId": self.clientId,
                "username": enteredPassword,
                "password": enteredUsername

            }
            try:
                # send message
                self.reqSocket.send_json(loginMessage)
        
                response = self.reqSocket.recv_json()
        
                if response.get('status') == 'success':
                    # login successful
                    self.attemptedLogins + 1
                    messagebox.showinfo("Wrong credentials", "Wrong username or password, please try again")

                else:
                    # failed login
                    self.attemptedLogins += 1
                    if self.attemptedLogins >= self.maxAttempts:
                        # lock out user from using ap
                        self.lockedUp = True
                        self.infoPopup("Error", "Too many attempts made")
                    else:
                        self.infoPopup("Login failed", "Wrong username or password, please try again")
            except Exception as e:
                self.infoPopup("Error", f"An error has occured: {e}")

    def infoPopup(self, title, message):
        popup = Popup(title=title, content=Label(text=message), size_hint=(0.8, 0.2))
        popup.open()

class chatScreen(Screen):
    def __init__(self, app, **kwargs):
        super(chatScreen, self).__init__(name='chat', **kwargs)
        self.app = app
        self.username = ''
        self.stopEvent = threading.Event()

        # build ui
